"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),function(app){app.registerModule("abouts")}(ApplicationConfiguration),function(app){app.registerModule("calendars")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("galleries")}(ApplicationConfiguration),function(app){app.registerModule("joins")}(ApplicationConfiguration),function(app){app.registerModule("members")}(ApplicationConfiguration),function(app){app.registerModule("news")}(ApplicationConfiguration),function(app){app.registerModule("pendingrequets")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"About",state:"abouts",roles:["*"]})}angular.module("abouts").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("abouts",{url:"/about",controller:"AboutsController",templateUrl:"modules/abouts/client/views/view-about.client.view.html"}).state("madelynaward",{url:"/about/madelynaward",controller:"AboutsController",templateUrl:"modules/abouts/client/views/madelynaward-about.client.view.html"}).state("distinctionaward",{url:"/about/distinctionaward",controller:"AboutsController",templateUrl:"modules/abouts/client/views/distinctionaward-about.client.view.html"}).state("abouts.list",{url:"",templateUrl:"modules/abouts/client/views/list-abouts.client.view.html",controller:"AboutsListController",controllerAs:"vm",data:{pageTitle:"Abouts List"}}).state("abouts.create",{url:"/create",templateUrl:"modules/abouts/client/views/form-about.client.view.html",controller:"AboutsController",controllerAs:"vm",resolve:{aboutResolve:newAbout},data:{roles:["user","admin"],pageTitle:"Abouts Create"}}).state("abouts.edit",{url:"/:aboutId/edit",templateUrl:"modules/abouts/client/views/form-about.client.view.html",controller:"AboutsController",controllerAs:"vm",resolve:{aboutResolve:getAbout},data:{roles:["user","admin"],pageTitle:"Edit About {{ aboutResolve.name }}"}}).state("abouts.view",{url:"/:aboutId",templateUrl:"modules/abouts/client/views/view-about.client.view.html",controller:"AboutsController",controllerAs:"vm",resolve:{aboutResolve:getAbout},data:{pageTitle:"About {{ aboutResolve.name }}"}})}function getAbout($stateParams,AboutsService){return AboutsService.get({aboutId:$stateParams.aboutId}).$promise}function newAbout(AboutsService){return new AboutsService}angular.module("abouts").config(routeConfig),routeConfig.$inject=["$stateProvider"],getAbout.$inject=["$stateParams","AboutsService"],newAbout.$inject=["AboutsService"]}(),function(){function AboutsController($scope,$state,$window,$modal,$log,Authentication,about){function modalUpdate(size,header){var url="";url="mission"!=header?"modules/abouts/client/views/modal-abouts-"+header+".client.view.html":"modules/abouts/client/views/modal-abouts.client.view.html";var modalInstance=$modal.open({templateUrl:url,controller:AboutsController,size:size});modalInstance.result.then(function(){},function(){$log.info("Modal dismissed at: "+new Date)})}function remove(){$window.confirm("Are you sure you want to delete?")&&vm.abouts.$remove($state.go("abouts.list"))}var vm=this;vm.authentication=Authentication,$scope.data="",$scope.user=Authentication.user,vm.abouts=about,vm.error=null,vm.form={},vm.remove=remove,$scope.edit=function(header){console.log(header),console.log(vm.abouts),modalUpdate(0,header)},$scope.updateText=function(header){},$scope.save=function(isValid){function successCallback(res){}function errorCallback(res){vm.error=res.data.message}return console.log("In SAVE"),isValid?void(vm.about._id?vm.abouts.$update(successCallback,errorCallback):vm.abouts.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.aboutForm"),!1)}}angular.module("abouts").controller("AboutsController",AboutsController),AboutsController.$inject=["$scope","$state","$window","$modal","$log","Authentication"]}(),function(){function AboutsService($resource){return $resource("api/abouts/:aboutId",{aboutId:"@_id"},{update:{method:"PUT"}})}angular.module("abouts").factory("AboutsService",AboutsService),AboutsService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Calendar",state:"calendars.list",roles:["*"]}),Menus.addSubMenuItem("topbar","calendars",{title:"List Calendars",state:"calendars.list"}),Menus.addSubMenuItem("topbar","calendars",{title:"Create Calendar",state:"calendars.create",roles:["user"]})}angular.module("calendars").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("calendars",{"abstract":!0,url:"/calendars",template:"<ui-view/>"}).state("calendars.list",{url:"",templateUrl:"modules/calendars/client/views/list-calendars.client.view.html",controller:"CalendarsListController",controllerAs:"vm",data:{pageTitle:"Calendars List"}}).state("calendars.create",{url:"/create",templateUrl:"modules/calendars/client/views/form-calendar.client.view.html",controller:"CalendarsController",controllerAs:"vm",resolve:{calendarResolve:newCalendar},data:{roles:["user","admin"],pageTitle:"Calendars Create"}}).state("calendars.edit",{url:"/:calendarId/edit",templateUrl:"modules/calendars/client/views/form-calendar.client.view.html",controller:"CalendarsController",controllerAs:"vm",resolve:{calendarResolve:getCalendar},data:{roles:["user","admin"],pageTitle:"Edit Calendar {{ calendarResolve.name }}"}}).state("calendars.view",{url:"/:calendarId",templateUrl:"modules/calendars/client/views/view-calendar.client.view.html",controller:"CalendarsController",controllerAs:"vm",resolve:{calendarResolve:getCalendar},data:{pageTitle:"Calendar {{ calendarResolve.name }}"}})}function getCalendar($stateParams,CalendarsService){return CalendarsService.get({calendarId:$stateParams.calendarId}).$promise}function newCalendar(CalendarsService){return new CalendarsService}angular.module("calendars").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCalendar.$inject=["$stateParams","CalendarsService"],newCalendar.$inject=["CalendarsService"]}(),function(){function CalendarsController($scope,$state,$window,Authentication,calendar){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.calendar.$remove($state.go("calendars.list"))}function save(isValid){function successCallback(res){$state.go("calendars.view",{calendarId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.calendar._id?vm.calendar.$update(successCallback,errorCallback):vm.calendar.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.calendarForm"),!1)}var vm=this;vm.authentication=Authentication,vm.calendar=calendar,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("calendars").controller("CalendarsController",CalendarsController),CalendarsController.$inject=["$scope","$state","$window","Authentication","calendarResolve"]}(),function(){function CalendarsListController($scope,CalendarsService,Authentication){var vm=this;$scope.user=Authentication.user,vm.calendars=CalendarsService.query()}angular.module("calendars").controller("CalendarsListController",CalendarsListController),CalendarsListController.$inject=["$scope","CalendarsService","Authentication"]}(),function(){function CalendarsService($resource){return $resource("api/ical",{update:{method:"GET"}})}angular.module("calendars").factory("CalendarsService",CalendarsService),CalendarsService.$inject=["$resource"]}(),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("FooterController",["$scope",function($scope){}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").directive("ycNavbarAffix",["$window",function($window){return{restrict:"A",link:function(scope,element,attrs){var orignOffsetTop=element[0].offsetTop;scope.condition=function(){return $window.pageYOffset>orignOffsetTop},angular.element($window).bind("scroll",function(){scope.$apply(function(){scope.condition()?angular.element(element).addClass("navbar-affix"):angular.element(element).removeClass("navbar-affix")})})}}}]),angular.module("core").controller("HomeController",["$scope","$modal","$log","Authentication","NewsService",function($scope,$modal,$log,Authentication,NewsService){function modalUpdate(size,header){var url="modules/core/client/views/modal-home.client.view.html",modalInstance=$modal.open({templateUrl:url,controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.update=function(){}}],size:size});modalInstance.result.then(function(){},function(){$log.info("Modal dismissed at: "+new Date)})}$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.whoweareText="AAW strives to empower UF women for the utmost success in each stage of their careers at the university.",$scope.myInterval=3e3,$scope.slides=[{image:"modules/core/client/img/pictures/slide 5.png"}],$scope.newslist=NewsService.query(),$scope.edit=function(header){console.log(header),modalUpdate(0,header)}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Gallery",state:"galleries",roles:["*"]})}angular.module("galleries").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("galleries",{url:"/gallery",controller:"GalleriesController",templateUrl:"modules/galleries/client/views/view-gallery.client.view.html"}).state("galleries.album",{url:"/album",controller:"GalleriesController",templateUrl:"modules/galleries/client/views/album-gallery.client.view.html"})}angular.module("galleries").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function GalleriesController($scope,$state,$window,Authentication,gallery){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.gallery.$remove($state.go("galleries.list"))}function save(isValid){function successCallback(res){$state.go("galleries.view",{galleryId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.gallery._id?vm.gallery.$update(successCallback,errorCallback):vm.gallery.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.galleryForm"),!1)}var vm=this;vm.authentication=Authentication,vm.gallery=gallery,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,$scope.albumName="Album Name",$scope.albumDate="December 31, 2017",$scope.albumDescription="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec blandit hendrerit diam, at condimentum sem lacinia at. Curabitur tincidunt malesuada sem non venenatis. Maecenas pulvinar."}angular.module("galleries").controller("GalleriesController",GalleriesController),GalleriesController.$inject=["$scope","$state","$window","Authentication"]}(),function(){function GalleriesListController(GalleriesService){var vm=this;vm.galleries=GalleriesService.query()}angular.module("galleries").controller("GalleriesListController",GalleriesListController),GalleriesListController.$inject=["GalleriesService"]}(),function(){function GalleriesService($resource){return $resource("api/galleries/:galleryId",{galleryId:"@_id"},{update:{method:"PUT"}})}angular.module("galleries").factory("GalleriesService",GalleriesService),GalleriesService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Join Us!",state:"joins",roles:["*"]})}angular.module("joins").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("joins",{url:"/joins",controller:"JoinsController",templateUrl:"modules/joins/client/views/view-join.client.view.html",controllerAs:"vm"}).state("payment",{url:"/payment",controller:"JoinsController",templateUrl:"modules/joins/client/views/payment-join.client.view.html"}).state("list",{url:"/list",templateUrl:"modules/joins/client/views/list-joins.client.view.html",controller:"JoinsListController",controllerAs:"vm"}).state("joins.create",{url:"/create",templateUrl:"modules/joins/client/views/form-join.client.view.html",controller:"JoinsController",controllerAs:"vm"}).state("joins.view",{url:"/:joinId",templateUrl:"modules/joins/client/views/list-join.client.view.html",controller:"JoinsController",controllerAs:"vm"})}angular.module("joins").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function JoinsController($rootScope,$scope,$state,$window,$modal,Authentication,join){function fillApplication(){$state.go("pendingrequets.create")}function remove(){$window.confirm("Are you sure you want to delete?")&&vm.join.$remove($state.go("joins.list"))}function save(isValid){function successCallback(res){$state.go("joins.view",{joinId:res._id})}function errorCallback(res){vm.error=res.data.message}return console.log("In Save"),isValid?void(vm.join._id?vm.join.$update(successCallback,errorCallback):vm.join.$save(successCallback,errorCallback)):(console.log("Is Valid"),$scope.$broadcast("show-errors-check-validity","vm.form.joinForm"),!1)}var vm=this;vm.authentication=Authentication,vm.join=join,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.fillApplication=fillApplication,$scope.myInterval=3e3,$scope.slides=[{image:"modules/core/client/img/pictures/1.jpg",text:"Recognition and Talent"},{image:"modules/core/client/img/pictures/2.jpg",text:"Hard Work"},{image:"modules/core/client/img/pictures/3.jpg",text:"Having Fun"},{image:"modules/core/client/img/pictures/4.jpg",text:"Panels and Discussion"}]}angular.module("joins").controller("JoinsController",JoinsController),JoinsController.$inject=["$rootScope","$scope","$state","$window","$modal","$location","Authentication"]}(),angular.module("joins").controller("ModalController",["$scope",function($scope){}]),function(){function JoinsListController(JoinsService){var vm=this;vm.joins=JoinsService.query()}angular.module("joins").controller("JoinsListController",JoinsListController),JoinsListController.$inject=["JoinsService"]}(),function(){function JoinsService($resource){return $resource("api/joins/:joinId",{joinId:"@_id"},{update:{method:"PUT"}})}angular.module("joins").factory("JoinsService",JoinsService),JoinsService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Members",state:"members",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","members",{title:"Profiles",state:"profiles"})}angular.module("members").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("members",{url:"/members",template:"modules/members/client/views/view-member.client.view.html"}).state("profiles",{url:"/members/profiles",templateUrl:"modules/members/client/views/view-profiles.client.view.html",controller:"ProfilesController",controllerAs:"vm"}).state("profilesModal",{url:"/members/profiles",templateUrl:"modules/members/client/views/profiles-modal.client.view.html",controller:"ProfilesController",controllerAs:"vm"})}function getMember($stateParams,MembersService){return MembersService.get({memberId:$stateParams.memberId}).$promise}function newMember(MembersService){return new MembersService}angular.module("members").config(routeConfig),routeConfig.$inject=["$stateProvider"],getMember.$inject=["$stateParams","MembersService"],newMember.$inject=["MembersService"]}(),function(){function MembersListController(MembersService){var vm=this;vm.members=MembersService.query()}angular.module("members").controller("MembersListController",MembersListController),MembersListController.$inject=["MembersService"]}(),function(){function MembersController($scope,$state,$window,Authentication,member){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.member.$remove($state.go("members.list"))}function save(isValid){function successCallback(res){$state.go("members.view",{memberId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.member._id?vm.member.$update(successCallback,errorCallback):vm.member.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.memberForm"),!1)}var vm=this;vm.authentication=Authentication,vm.member=member,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("members").controller("MembersController",MembersController),MembersController.$inject=["$scope","$state","$window","Authentication","memberResolve"]}(),function(){function ProfilesController($scope,$state,$window,$modal,$log,MembersService){var vm=this;$scope.profiles=MembersService.query(),vm.modalUpdate=function(selectedProfile,size){var modalInstance=$modal.open({templateUrl:"modules/members/client/views/profiles-modal.client.view.html",controller:["$scope","$modalInstance","profile",function($scope,$modalInstance,profile){$scope.profile=profile}],size:size,resolve:{profile:function(){return selectedProfile}}});modalInstance.result.then(function(selectedProfile){$scope.selected=selectedProfile},function(){$log.info("Modal dismissed at: "+new Date)})}}angular.module("members").controller("ProfilesController",ProfilesController),ProfilesController.$inject=["$scope","$state","$window","$modal","$log","MembersService"]}(),function(){function MembersService($resource){return $resource("api/members/:memberId",{memberId:"@_id"},{update:{method:"PUT"}})}angular.module("members").factory("MembersService",MembersService),MembersService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"News",state:"news",type:"dropdown",roles:["admin"]}),Menus.addSubMenuItem("topbar","news",{title:"List News",state:"news.list"}),Menus.addSubMenuItem("topbar","news",{title:"Create News",state:"news.create"})}angular.module("news").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("news",{"abstract":!0,url:"/news",template:"<ui-view/>"}).state("news.list",{url:"",templateUrl:"modules/news/client/views/list-news.client.view.html",controller:"NewsListController",controllerAs:"vm",data:{pageTitle:"News List"}}).state("news.create",{url:"/create",templateUrl:"modules/news/client/views/form-news.client.view.html",controller:"NewsController",controllerAs:"vm",resolve:{newsResolve:newNews},data:{roles:["user","admin"],pageTitle:"News Create"}}).state("news.edit",{url:"/:newsId/edit",templateUrl:"modules/news/client/views/form-news.client.view.html",controller:"NewsController",controllerAs:"vm",resolve:{newsResolve:getNews},data:{roles:["user","admin"],pageTitle:"Edit News {{ newsResolve.name }}"}}).state("news.view",{url:"/:newsId",templateUrl:"modules/news/client/views/view-news.client.view.html",controller:"NewsController",controllerAs:"vm",resolve:{newsResolve:getNews},data:{pageTitle:"News {{ newsResolve.name }}"}})}function getNews($stateParams,NewsService){return NewsService.get({newsId:$stateParams.newsId}).$promise}function newNews(NewsService){return new NewsService}angular.module("news").config(routeConfig),routeConfig.$inject=["$stateProvider"],getNews.$inject=["$stateParams","NewsService"],newNews.$inject=["NewsService"]}(),function(){function NewsListController(NewsService){var vm=this;vm.news=NewsService.query()}angular.module("news").controller("NewsListController",NewsListController),NewsListController.$inject=["NewsService"]}(),function(){function NewsController($scope,$state,$window,Authentication,news,Admin){function remove(){$window.confirm('Are you sure you want to delete "'+vm.news.name+'"?')&&vm.news.$remove($state.go("news.list"))}function save(isValid){function successCallback(res){$state.go("news.list",{newsId:res._id})}function errorCallback(res){vm.error=res.data.message}return console.log($scope.usersList),console.log(vm.authentication),console.log($scope.currUserRole),console.log(news),isValid?void(vm.news._id?vm.news.$update(successCallback,errorCallback):vm.news.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.newsForm"),!1)}var vm=this;$scope.usersList=Admin.query(),$scope.user="HI",$scope.currUserRole=Authentication.user.roles[0],vm.authentication=Authentication,vm.news=news,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("news").controller("NewsController",NewsController),NewsController.$inject=["$scope","$state","$window","Authentication","newsResolve","Admin"]}(),function(){function NewsService($resource){return $resource("api/news/:newsId",{newsId:"@_id"},{update:{method:"PUT"}})}angular.module("news").factory("NewsService",NewsService),NewsService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"List New Members",state:"pendingrequets.list",roles:["admin"]}),Menus.addSubMenuItem("topbar","pendingrequets",{title:"Join Now",state:"pendingrequets.create"})}angular.module("pendingrequets").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("pendingrequets",{url:"/pendingrequets",template:"<ui-view/>"}).state("pendingrequets.list",{url:"/list",templateUrl:"modules/pendingrequets/client/views/list-pendingrequets.client.view.html",controller:"PendingrequetsListController",controllerAs:"vm",resolve:{pendingrequetResolve:getPendingrequets},data:{pageTitle:"Pendingrequets List",roles:["admin"]}}).state("pendingrequets.create",{url:"/create",templateUrl:"modules/pendingrequets/client/views/form-pendingrequet.client.view.html",controller:"PendingrequetsController",controllerAs:"vm",resolve:{pendingrequetResolve:newPendingrequet},data:{pageTitle:"Pendingrequets Create"}}).state("pendingrequets.view",{url:"/:pendingrequetId",templateUrl:"modules/pendingrequets/client/views/view-pendingrequet.client.view.html",controller:"PendingrequetsController",controllerAs:"vm",resolve:{pendingrequetResolve:getPendingrequet},data:{pageTitle:"Pendingrequet {{ pendingrequetResolve.name }}"}})}function getPendingrequet($stateParams,PendingrequetsService){return PendingrequetsService.get({pendingrequetId:$stateParams.pendingrequetId}).$promise}function getPendingrequets(PendingrequetsService){return PendingrequetsService.query().$promise}function newPendingrequet(PendingrequetsService){return new PendingrequetsService}angular.module("pendingrequets").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPendingrequet.$inject=["$stateParams","PendingrequetsService"],getPendingrequets.$inject=["PendingrequetsService"],newPendingrequet.$inject=["PendingrequetsService"]}(),function(){function PendingrequetsListController(PendingrequetsService){var vm=this;vm.pendingrequets=PendingrequetsService.query()}angular.module("pendingrequets").controller("PendingrequetsListController",PendingrequetsListController),
PendingrequetsListController.$inject=["PendingrequetsService"]}(),function(){function PendingrequetsController($scope,$state,$window,$modal,$timeout,Authentication,FileUploader,pendingrequet){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.pendingrequet.$remove($state.go("pendingrequets.list"))}function save(isValid){function successCallback(res){$state.go("pendingrequets.view",{pendingrequetId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.pendingrequet._id?vm.pendingrequet.$update(successCallback,errorCallback):vm.pendingrequet.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.pendingrequetForm"),!1)}var vm=this;vm.authentication=Authentication,vm.pendingrequet=pendingrequet,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,$scope.isDisabled=!0,$scope.clickedYes=function(){$scope.showMe=!0,$scope.isDisabled=!1},$scope.clickedNo=function(){$scope.showMe=!1,$scope.isDisabled=!1},$scope.goToPay=function(){$modal.open({templateUrl:"modules/joins/client/views/modal-join.client.view.html",controller:"JoinsController"}).result.then(function(){var url="https://squareup.com/store/UFLAAW";$window.open(url)})},$scope.cancelForm=function(){$state.go("joins")},$scope.fillFields=function(){vm.pendingrequet.imageURL&&"./modules/pendingrequets/client/img/memberImages/uploads/"!==vm.pendingrequet.imageURL?$scope.imageURL=vm.pendingrequet.imageURL:($scope.imageURL="./modules/pendingrequets/client/img/memberImages/default.png",console.log($scope.imageURL))},$scope.uploader=new FileUploader({url:"/api/pendingrequets/picture",alias:"newMemberPicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if(console.log("onAfterAddingFile"),$window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result,$scope.uploadPicture()},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){console.log("onSuccessItem"),$scope.success=!0,vm.pendingrequet.filename=response.file.filename,vm.pendingrequet.imageURL=response.file.filename,console.log("filename: "+vm.pendingrequet.filename)},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadPicture=function(){console.log("upload Picture"),$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue()}}angular.module("pendingrequets").controller("PendingrequetsController",PendingrequetsController),PendingrequetsController.$inject=["$scope","$state","$window","$modal","$timeout","Authentication","FileUploader","pendingrequetResolve"]}(),function(){function PendingrequetsService($resource){return $resource("api/pendingrequets/:pendingrequetId",{pendingrequetId:"@_id"},{update:{method:"PUT"}})}angular.module("pendingrequets").factory("PendingrequetsService",PendingrequetsService),PendingrequetsService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go("home")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go("home")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);